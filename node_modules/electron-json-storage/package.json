{
  "_args": [
    [
      {
        "raw": "electron-json-storage",
        "scope": null,
        "escapedName": "electron-json-storage",
        "name": "electron-json-storage",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/nico/Projects/git-bakery"
    ]
  ],
  "_from": "electron-json-storage@latest",
  "_id": "electron-json-storage@3.0.5",
  "_inCache": true,
  "_location": "/electron-json-storage",
  "_nodeVersion": "6.1.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/electron-json-storage-3.0.5.tgz_1492187754260_0.8107917017769068"
  },
  "_npmUser": {
    "name": "jviotti",
    "email": "jviotti@openmailbox.org"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "electron-json-storage",
    "scope": null,
    "escapedName": "electron-json-storage",
    "name": "electron-json-storage",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/electron-json-storage/-/electron-json-storage-3.0.5.tgz",
  "_shasum": "51702d2c25dc5c752c8d4ca50412ee80a57683a4",
  "_shrinkwrap": null,
  "_spec": "electron-json-storage",
  "_where": "/home/nico/Projects/git-bakery",
  "author": {
    "name": "Juan Cruz Viotti",
    "email": "jviottidc@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jviotti/electron-json-storage/issues"
  },
  "dependencies": {
    "async": "^2.0.0",
    "lodash": "^4.0.1",
    "mkdirp": "^0.5.1",
    "rimraf": "^2.5.1"
  },
  "description": "Easily write and read user settings in Electron apps",
  "devDependencies": {
    "electron-mocha": "^3.3.0",
    "electron-prebuilt": "^1.2.7",
    "jsdoc-to-markdown": "^2.0.1",
    "jshint": "^2.9.1",
    "mochainon": "^1.0.0",
    "tmp": "0.0.31"
  },
  "directories": {
    "test": "tests"
  },
  "dist": {
    "shasum": "51702d2c25dc5c752c8d4ca50412ee80a57683a4",
    "tarball": "https://registry.npmjs.org/electron-json-storage/-/electron-json-storage-3.0.5.tgz"
  },
  "gitHead": "60a34b5915fd3ea6edbd5394f2455ab549f1b8d5",
  "homepage": "https://github.com/jviotti/electron-json-storage",
  "keywords": [
    "electron",
    "json",
    "storage",
    "user",
    "app",
    "data"
  ],
  "license": "MIT",
  "main": "lib/storage.js",
  "maintainers": [
    {
      "name": "jviotti",
      "email": "jviottidc@gmail.com"
    }
  ],
  "name": "electron-json-storage",
  "optionalDependencies": {},
  "readme": "electron-json-storage\n=====================\n\n> Easily write and read user settings in Electron apps\n\n[![npm version](https://badge.fury.io/js/electron-json-storage.svg)](http://badge.fury.io/js/electron-json-storage)\n[![dependencies](https://david-dm.org/jviotti/electron-json-storage.svg)](https://david-dm.org/jviotti/electron-json-storage.svg)\n[![Build Status](https://travis-ci.org/jviotti/electron-json-storage.svg?branch=master)](https://travis-ci.org/jviotti/electron-json-storage)\n[![Build status](https://ci.appveyor.com/api/projects/status/ulwk1nnh7l8209xg/branch/master?svg=true)](https://ci.appveyor.com/project/jviotti/electron-json-storage/branch/master)\n\n[Electron](http://electron.atom.io) lacks an easy way to persist and read user settings for your application. `electron-json-storage` implements an API somehow similar to [localStorage](https://developer.mozilla.org/en/docs/Web/API/Window/localStorage) to write and read JSON objects to/from the operating system application data directory, as defined by `app.getPath('userData')`.\n\nInstallation\n------------\n\nInstall `electron-json-storage` by running:\n\n```sh\n$ npm install --save electron-json-storage\n```\n\nYou can require this module from either the **main** or **renderer** process (with and without `remote`).\n\nDocumentation\n-------------\n\n\n* [storage](#module_storage)\n    * [.get(key, callback)](#module_storage.get)\n    * [.getMany(keys, callback)](#module_storage.getMany)\n    * [.getAll(callback)](#module_storage.getAll)\n    * [.set(key, json, callback)](#module_storage.set)\n    * [.has(key, callback)](#module_storage.has)\n    * [.keys(callback)](#module_storage.keys)\n    * [.remove(key, callback)](#module_storage.remove)\n    * [.clear(callback)](#module_storage.clear)\n\n<a name=\"module_storage.get\"></a>\n\n### storage.get(key, callback)\nIf the key doesn't exist in the user data, an empty object is returned.\nAlso notice that the `.json` extension is added automatically, but it's\nignored if you pass it yourself.\n\nPassing an extension other than `.json` will result in a file created\nwith both extensions. For example, the key `foo.data` will result in a file\ncalled `foo.data.json`.\n\n**Kind**: static method of <code>[storage](#module_storage)</code>  \n**Summary**: Read user data  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>String</code> | key |\n| callback | <code>function</code> | callback (error, data) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.get('foobar', function(error, data) {\n  if (error) throw error;\n\n  console.log(data);\n});\n```\n<a name=\"module_storage.getMany\"></a>\n\n### storage.getMany(keys, callback)\nThis function returns an object with the data of all the passed keys.\nIf one of the keys doesn't exist, an empty object is returned for it.\n\n**Kind**: static method of <code>[storage](#module_storage)</code>  \n**Summary**: Read many user data keys  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| keys | <code>Array.&lt;String&gt;</code> | keys |\n| callback | <code>function</code> | callback (error, data) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.getMany([ 'foobar', 'barbaz' ], function(error, data) {\n  if (error) throw error;\n\n  console.log(data.foobar);\n  console.log(data.barbaz);\n});\n```\n<a name=\"module_storage.getAll\"></a>\n\n### storage.getAll(callback)\nThis function returns an empty object if there is no data to be read.\n\n**Kind**: static method of <code>[storage](#module_storage)</code>  \n**Summary**: Read all user data  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| callback | <code>function</code> | callback (error, data) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.getAll(function(error, data) {\n  if (error) throw error;\n\n  console.log(data);\n});\n```\n<a name=\"module_storage.set\"></a>\n\n### storage.set(key, json, callback)\n**Kind**: static method of <code>[storage](#module_storage)</code>  \n**Summary**: Write user data  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>String</code> | key |\n| json | <code>Object</code> | json object |\n| callback | <code>function</code> | callback (error) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.set('foobar', { foo: 'bar' }, function(error) {\n  if (error) throw error;\n});\n```\n<a name=\"module_storage.has\"></a>\n\n### storage.has(key, callback)\n**Kind**: static method of <code>[storage](#module_storage)</code>  \n**Summary**: Check if a key exists  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>String</code> | key |\n| callback | <code>function</code> | callback (error, hasKey) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.has('foobar', function(error, hasKey) {\n  if (error) throw error;\n\n  if (hasKey) {\n    console.log('There is data stored as `foobar`');\n  }\n});\n```\n<a name=\"module_storage.keys\"></a>\n\n### storage.keys(callback)\n**Kind**: static method of <code>[storage](#module_storage)</code>  \n**Summary**: Get the list of saved keys  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| callback | <code>function</code> | callback (error, keys) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.keys(function(error, keys) {\n  if (error) throw error;\n\n  for (var key of keys) {\n    console.log('There is a key called: ' + key);\n  }\n});\n```\n<a name=\"module_storage.remove\"></a>\n\n### storage.remove(key, callback)\nNotice this function does nothing, nor throws any error\nif the key doesn't exist.\n\n**Kind**: static method of <code>[storage](#module_storage)</code>  \n**Summary**: Remove a key  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>String</code> | key |\n| callback | <code>function</code> | callback (error) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.remove('foobar', function(error) {\n  if (error) throw error;\n});\n```\n<a name=\"module_storage.clear\"></a>\n\n### storage.clear(callback)\n**Kind**: static method of <code>[storage](#module_storage)</code>  \n**Summary**: Clear all stored data  \n**Access:** public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| callback | <code>function</code> | callback (error) |\n\n**Example**  \n```js\nconst storage = require('electron-json-storage');\n\nstorage.clear(function(error) {\n  if (error) throw error;\n});\n```\n\nSupport\n-------\n\nIf you're having any problem, please [raise an issue](https://github.com/jviotti/electron-json-storage/issues/new) on GitHub and I'll be happy to help.\n\nTests\n-----\n\nRun the test suite by doing:\n\n```sh\n$ npm test\n```\n\nContribute\n----------\n\n- Issue Tracker: [github.com/jviotti/electron-json-storage/issues](https://github.com/jviotti/electron-json-storage/issues)\n- Source Code: [github.com/jviotti/electron-json-storage](https://github.com/jviotti/electron-json-storage)\n\nBefore submitting a PR, please make sure that you include tests, and that [jshint](http://jshint.com) runs without any warning:\n\n```sh\n$ npm run-script lint\n```\n\nLicense\n-------\n\nThe project is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jviotti/electron-json-storage.git"
  },
  "scripts": {
    "lint": "jshint --config .jshintrc --reporter unix lib tests",
    "readme": "jsdoc2md --template doc/README.hbs lib/storage.js > README.md",
    "test": "electron-mocha --recursive tests -R spec && electron-mocha --renderer --recursive tests -R spec"
  },
  "version": "3.0.5"
}
